#version 400 core

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of noise_lib.glsl ***********************************
const int MAX_NUM_NOISE_LAYERS = 15;
struct NoiseLayer {
    float frequency;
    float amplitude;
    bool enabled;
};
vec3 snoise2(vec2 P);
vec4 generateHeightCustom(in vec2 pos, in NoiseLayer noiseLayers[MAX_NUM_NOISE_LAYERS], in int numNoiseLayers,
in float power, in float bowlStrength, in float platformHeight, in int seed, bool noiseLayersEnabled, bool powerEnabled, bool bowlEnabeld, bool platformEnabled);
//***** end interface of noise_lib.glsl ***********************************

layout (triangles, equal_spacing, cw) in;

in vec2 position_tes[];

uniform float uvScaleFactor;

uniform bool noiseLayersEnabled;
uniform bool powerEnabled;
uniform bool bowlEnabled;
uniform bool platformEnabled;

uniform NoiseLayer noiseLayers[MAX_NUM_NOISE_LAYERS];
uniform int numNoiseLayers;
uniform float power;
uniform float bowlStrength;
uniform float platformHeight;
uniform int seed;

out vec2 uv_fs;
out vec3 normal_fs;
out vec3 tangent_fs;
out vec3 bitangent_fs;
out vec3 model_position_fs;
out float normalized_height_fs;

void main() {
    vec2 pos = gl_TessCoord.x * position_tes[0];
    pos     += gl_TessCoord.y * position_tes[1];
    pos     += gl_TessCoord.z * position_tes[2];

    vec4 noise = generateHeightCustom(pos, noiseLayers, numNoiseLayers, power, bowlStrength, platformHeight, seed, noiseLayersEnabled, powerEnabled, bowlEnabled, platformEnabled);
    normalized_height_fs = noise.w;
    tangent_fs = vec3(1.0F, noise.y, 0.0F);
    bitangent_fs = vec3(0.0F, noise.z, 1.0F);
    normal_fs = -normalize(cross(tangent_fs, bitangent_fs));
    uv_fs = pos / uvScaleFactor;

    vec4 position = get_modelview_matrix() * vec4(pos.x, noise.x, pos.y, 1.0F);
    model_position_fs = position.xyz;
    gl_Position = get_projection_matrix() * position;
}
