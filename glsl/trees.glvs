#version 330 core

#define M_PI 3.1415926535897932384626433832795

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of noice_lib.glsl ***********************************
float gold_noise(in float seed);
//***** end interface of noice_lib.glsl ***********************************

in vec4 position;
in vec3 normal;
in vec2 texcoord;

out vec3 position_fs;
out vec3 normal_fs;
out vec2 uv_fs;

uniform sampler2D position_texture;
uniform bool has_position_texture = false;
uniform int tree_count;
uniform float rotation = 0.0F;

void main() {
    vec3 positionOffset = vec3(0.0F);
    if (has_position_texture) {
        const int sectionCount = 16;
        const int treesPerSectionPositionTexture = 64;
        int treesPerSection = tree_count / sectionCount;
        int indexInsideSection = gl_InstanceID % treesPerSection;
        int sectionIndex = gl_InstanceID / treesPerSection;
        int indexOnPositionTexture = sectionIndex * treesPerSectionPositionTexture + indexInsideSection;
        vec2 uv = vec2(0.0F, 0.0F);
        ivec2 positionTextureSize = textureSize(position_texture, 0);
        uv.x = float(indexOnPositionTexture % positionTextureSize.x) / float(positionTextureSize.x);
        uv.y = float(indexOnPositionTexture / positionTextureSize.y) / float(positionTextureSize.y);
        positionOffset = texture(position_texture, uv).xyz;
    }

    float alpha = gold_noise(float(gl_InstanceID) / float(tree_count)) * 2.0 * M_PI;
    if (rotation != 0.0F) {
        alpha = rotation;
    }
    mat4 rotationMatrix;
    rotationMatrix[0] = vec4(cos(alpha), 0.0, -sin(alpha), 0.0);
    rotationMatrix[1] = vec4(0.0, 1.0, 0.0, 0.0);
    rotationMatrix[2] = vec4(sin(alpha), 0.0, cos(alpha), 0.0);
    rotationMatrix[3] = vec4(0.0, 0.0, 0.0, 1.0);

    float scale = 0.1F;// TODO make this configurable
    mat4 scaleMatrix;
    scaleMatrix[0] = vec4(scale, 0.0, 0.0, 0.0);
    scaleMatrix[1] = vec4(0.0, scale, 0.0, 0.0);
    scaleMatrix[2] = vec4(0.0, 0.0, scale, 0.0);
    scaleMatrix[3] = vec4(0.0, 0.0, 0.0, 1.0);

    vec4 rotatedPosition = rotationMatrix * scaleMatrix * position;
    vec4 viewPosition = get_modelview_matrix() * (vec4(positionOffset, 0.0F) + rotatedPosition);
    position_fs = viewPosition.xyz;
    gl_Position = get_projection_matrix() * viewPosition;
    normal_fs = normal;
    uv_fs = texcoord;
}
