#version 150 compatibility

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of scatter.glsl ***********************************
vec4 calculate_scattering_eye(
vec3 position,

mat4 view_matrix, // HACK we are using the camera orientation to position the planet correctly, since the given start position and direction are in camera space

vec4 scene_color, // the color of the scene
vec3 light_dir, // the direction of the light
vec3 light_intensity// how bright the light is, affects the brightness of the atmosphere
);
//***** end interface of scatter.glsl ***********************************

//***** begin interface of lights.glsl ***********************************
struct LightSource
{
    int light_source_type;
    vec3 position;
    vec3 emission;
    float ambient_scale;
    vec3 spot_direction;
    float spot_exponent;
    float spot_cos_cutoff;
    float constant_attenuation;
    float linear_attenuation;
    float quadratic_attenuation;
};
int get_nr_light_sources();
LightSource get_light_source(int i);
void evaluate_light(LightSource L, in vec3 p_eye, out vec3 omega_in, out vec3 radiance_in);

//***** end interface of lights.glsl ***********************************
//***** begin interface of side.glsl ***********************************
bool keep_this_side(in vec3 position, in vec3 normal, out int side);
void update_material_color_and_transparency(inout vec3 mat_color, inout float transparency, in int side, in vec4 color);
void update_normal(inout vec3 normal, in int side);
//***** end interface of side.glsl ***********************************

//***** begin interface of surface.glsl ***********************************
struct Material {
    int brdf_type;
    vec3 diffuse_reflectance;
    float roughness;
    float metalness;
    float ambient_occlusion;
    vec3 emission;
    float transparency;
    vec2 propagation_slow_down;
    float roughness_anisotropy;
    float roughness_orientation;
    vec3 specular_reflectance;
};
Material get_material();
vec4 lookup_texture(int ti, vec2 texcoords, bool is_color);
vec4 compute_reflected_radiance(in Material M, vec3 position_eye, vec3 normal_eye);
vec4 compute_reflected_appearance(vec3 position_eye, vec3 normal_eye, vec4 color, int side);
vec4 compute_reflected_appearance_texture(vec3 position_eye, vec3 normal_eye, vec2 texcoords, vec4 color, int side);
//***** end interface of surface.glsl ***********************************

in vec2 texcoord_fs;

out vec4 color;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedo;
uniform sampler2D gIsCloud;
uniform sampler2D ssao;
uniform sampler2D ssaoBlur;

uniform int render_target = 0;
uniform bool use_atmospheric_scattering = false;
uniform bool use_ambient_occlusion = false;
uniform float aspect_ratio = 1.0F;// TODO find out where we can get this information from

vec4 compute_reflected_appearance_custom(vec3 position_eye, vec3 normal_eye, vec4 color, float ambient_occlusion) {
    // TODO check that ambient occlusion is applied correctly
    int side = 0;
    Material M = get_material();
    M.ambient_occlusion = ambient_occlusion;
    update_material_color_and_transparency(M.diffuse_reflectance, M.transparency, side, color);
    update_normal(normal_eye, side);
    return compute_reflected_radiance(M, position_eye, normal_eye);
}

void main() {
    if (render_target == 1) {
        color = texture(gPosition, texcoord_fs);
        return;
    }
    if (render_target == 2) {
        color = texture(gNormal, texcoord_fs);
        return;
    }
    if (render_target == 3) {
        color = texture(gAlbedo, texcoord_fs);
        return;
    }
    if (render_target == 4) {
        vec4 temp = texture(gIsCloud, texcoord_fs);
        color = vec4(temp.r, temp.r, temp.r, 1.0F);
        return;
    }
    if (render_target == 5) {
        vec4 temp = texture(ssao, texcoord_fs);
        color = vec4(temp.r, temp.r, temp.r, 1.0F);
        return;
    }
    if (render_target == 6) {
        vec4 temp = texture(ssaoBlur, texcoord_fs);
        color = vec4(temp.r, temp.r, temp.r, 1.0F);
        return;
    }
    if (render_target == 7) {
        vec3 position = texture(gPosition, texcoord_fs).xyz;
        vec3 normal = normalize(texture(gNormal, texcoord_fs).xyz);
        vec4 diffuseMaterial = vec4(texture(gAlbedo, texcoord_fs).rgb, 1.0);
        color = compute_reflected_appearance(position, normal, diffuseMaterial, 0);
        return;
    }

    vec3 position = texture(gPosition, texcoord_fs).xyz;
    vec3 normal = normalize(texture(gNormal, texcoord_fs).xyz);
    vec4 diffuse = vec4(texture(gAlbedo, texcoord_fs).rgb, 1.0);
    bool CloudLighting = texture(gIsCloud, texcoord_fs).r == 1.0F;

    float AmbientOcclusion = 1.0F;
    if (use_ambient_occlusion) {
        AmbientOcclusion = texture(ssaoBlur, texcoord_fs).r;
    }

    if (position.x == 0.0 && position.y == 0.0 && position.z == 0.0) {
        // set position of the background to something very far away
        vec2 uv = (texcoord_fs - vec2(0.5)) * 2.0;
        uv.x *= aspect_ratio;
        position = normalize(vec3(uv, -1.0)) * 1e12;
        // deep space is black o.o
        color = vec4(0.0);
    } else {
        color = compute_reflected_appearance_custom(position, normal, diffuse, AmbientOcclusion);
    }

    int num_lights = get_nr_light_sources();
    if (use_atmospheric_scattering && num_lights > 0) {
        if (CloudLighting) {
            vec2 uv = (texcoord_fs - vec2(0.5)) * 2.0;
            uv.x *= aspect_ratio;
            position = normalize(vec3(uv, -1.0)) * 1e12;
        }

        // NOTE: simply using the first light as the sun
        // TODO the first light might not be a directional light...
        LightSource light = get_light_source(1);
        vec3 light_dir = light.position;
        vec3 lightPower = vec3(30.0);
        color = calculate_scattering_eye(position, get_modelview_matrix(), color, normalize(light_dir), lightPower);

        if (CloudLighting){
            color.rgb = mix(color.rgb, vec3(1.0F), diffuse.r);
        }
    }
}
